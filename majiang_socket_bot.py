import threading
import socketio
import requests
import random
import string
import time
from bot import Bot, get_bot
from game_state import GameState


def generate_random_name(length=5):
    letters = string.ascii_letters
    return "Mortal_" + "".join([random.choice(letters) for _ in range(length)])


class MajiangBot:
    sio = socketio.Client()
    server = "http://127.0.0.1:8000"  # "https://kobalab.net/"
    authpath = "/server/auth/"  # "majiang/server/auth/"
    socketpath = "/server/socket.io/"  # "majiang/server/socket.io/"
    bot: Bot = None
    game: GameState = None
    myuid = ""
    myname = ""
    is_in_room = False
    is_in_game = False
    room = ""
    session = requests.Session()

    def __init__(self, modelpath, room=""):

        self.bot = get_bot(modelpath)
        self.game = GameState(self.bot)
        self.room = room

    def loop(self):
        self.sio.wait()

    def start(self):
        # self.session.verify = False
        self.myname = generate_random_name(4)
        self.session.post(
            self.server + self.authpath, data={"name": self.myname, "passwd": "*"}
        )
        self.sio = socketio.Client(http_session=self.session, logger=True)
        self.callbacks()
        self.sio.connect(self.server, socketio_path=self.socketpath)
        self.loop()

    def callbacks(self):
        @self.sio.event
        def connect():
            print("Connected to server:", self.server)
            if self.room:
                self.sio.emit("ROOM", self.room)
            else:
                self.sio.emit("ROOM")

        @self.sio.event
        def connect_error(data):
            print("The connection failed!", data)

        @self.sio.event
        def disconnect():
            print("I'm disconnected!")

        @self.sio.on("HELLO")
        def on_hello(data):
            print("HELLO received:", data)
            if not data:
                print("Login failed!")
                self.sio.disconnect()
            else:
                if self.myuid and "offline" in data.keys():
                    print("Get kicked out")
                    self.sio.disconnect()
                else:
                    self.myuid = data["uid"]
                print("User ID:", self.myuid)
                self.is_in_room = False

        @self.sio.on("ROOM")
        def on_room(data):
            print("ROOM received:", data)
            self.is_in_room = True

        @self.sio.on("START")
        def on_start():
            self.is_in_game = True
            print("START received")

        @self.sio.on("END")
        def on_end(data):
            print("END received:", data)
            self.is_in_game = False
            self.is_in_room = False
            self.sio.disconnect()

        @self.sio.on("ERROR")
        def on_error(data):
            print("ERROR received:", data)
            self.sio.disconnect()

        @self.sio.on("GAME")
        def on_game(data):
            if "players" in data.keys():
                print("GAME received:", data)
                return
            # msg = json.loads(data)
            # print(game.input(msg))
            mjai_react = self.game.input(data)
            reaction = self.game.trans_mjai_react(mjai_react)
            print(mjai_react, reaction)
            self.sio.emit("GAME", reaction)


mp = "Your Mortal pth model path"
rm = "The room ID generated by you"
bots = [MajiangBot(mp, rm) for _ in range(3)]

# Create and start a thread for each bot
threads = []
for bot in bots:
    thread = threading.Thread(target=bot.start)
    threads.append(thread)
    thread.start()
    time.sleep(1)

# Optionally, wait for all threads to complete
for thread in threads:
    thread.join()
